// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// DeleteUserNotFound is response for DeleteUser operation.
type DeleteUserNotFound struct{}

func (*DeleteUserNotFound) deleteUserRes() {}

// GetUserNotFound is response for GetUser operation.
type GetUserNotFound struct{}

func (*GetUserNotFound) getUserRes() {}

// Ref: #/components/schemas/NewUser
type NewUser struct {
	// Full user name.
	Name string `json:"name"`
	// Unique username.
	Username string `json:"username"`
}

// GetName returns the value of Name.
func (s *NewUser) GetName() string {
	return s.Name
}

// GetUsername returns the value of Username.
func (s *NewUser) GetUsername() string {
	return s.Username
}

// SetName sets the value of Name.
func (s *NewUser) SetName(val string) {
	s.Name = val
}

// SetUsername sets the value of Username.
func (s *NewUser) SetUsername(val string) {
	s.Username = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/UpdateUser
type UpdateUser struct {
	// Full user name.
	Name OptString `json:"name"`
	// Unique username.
	Username OptString `json:"username"`
}

// GetName returns the value of Name.
func (s *UpdateUser) GetName() OptString {
	return s.Name
}

// GetUsername returns the value of Username.
func (s *UpdateUser) GetUsername() OptString {
	return s.Username
}

// SetName sets the value of Name.
func (s *UpdateUser) SetName(val OptString) {
	s.Name = val
}

// SetUsername sets the value of Username.
func (s *UpdateUser) SetUsername(val OptString) {
	s.Username = val
}

// UpdateUserNotFound is response for UpdateUser operation.
type UpdateUserNotFound struct{}

func (*UpdateUserNotFound) updateUserRes() {}

// Ref: #/components/schemas/User
type User struct {
	// Unique user identifier.
	ID uuid.UUID `json:"id"`
	// Full user name.
	Name string `json:"name"`
	// Unique username.
	Username string `json:"username"`
}

// GetID returns the value of ID.
func (s *User) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() string {
	return s.Username
}

// SetID sets the value of ID.
func (s *User) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

func (*User) getUserRes()    {}
func (*User) updateUserRes() {}
