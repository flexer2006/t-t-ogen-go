// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateUser implements createUser operation.
	//
	// Creates a new user.
	//
	// POST /users
	CreateUser(ctx context.Context, req *NewUser) (*User, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes a user.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// GetUser implements getUser operation.
	//
	// Returns a user by identifier.
	//
	// GET /users/{id}
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// ListUsers implements listUsers operation.
	//
	// Returns all users.
	//
	// GET /users
	ListUsers(ctx context.Context) ([]User, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates user data.
	//
	// PUT /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUser, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
